---
# Source: argonaut-configs/templates/poddisruptionbudget.yaml
apiVersion: policy/v1beta1
kind: PodDisruptionBudget
metadata:
  name: "myappname-pdb"
spec:
  maxUnavailable: 25%
  selector:
    matchLabels:
      app: "myappname"
---
# Source: argonaut-configs/templates/service.yaml
kind: Service
apiVersion: v1
metadata:
  name: "myappname"
  labels:
    heritage: "Helm"
    release: "RELEASE-NAME"
    chart: "argonaut-configs"
    version: "v1"
    app: "myappname"
spec:
  type: ClusterIP
  selector:
    release: "RELEASE-NAME"
    chart: "argonaut-configs"
    app: "myappname"
  ports: 
    - name: "myappname-http"
      protocol: TCP # UDP and SCTP are the other options
      port: 80 
    - name: "myappname-https"
      protocol: TCP # UDP and SCTP are the other options
      port: 443
---
# Source: argonaut-configs/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: myappname
  labels:
    heritage: "Helm"
    release: "RELEASE-NAME"
    chart: "argonaut-configs"
    app: "myappname"
    version: "v1"
  annotations:
    {}
spec:
  serviceName: myappname
  selector:
    matchLabels:
      app: "myappname"
  replicas: 2
  podManagementPolicy: Parallel
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      name: "myappname"
      labels:
        heritage: "Helm"
        release: "RELEASE-NAME"
        chart: "argonaut-configs"
        app: "myappname"
      annotations:
        
    spec:
      securityContext:
        {}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 1
            podAffinityTerm:
              topologyKey: kubernetes.io/hostname
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - "myappname"
      terminationGracePeriodSeconds: 120
      # Mount Secrets
      volumes:
      # Persistence Enabled - volume mounts
      # extraConfig
      imagePullSecrets:
        - name: image-pull-secret
      initContainers:

      containers:
      - name: "argonaut-configs"
        securityContext:
          {}
        image: "wordpress:latest"
        imagePullPolicy: "IfNotPresent"

        ports:
        - name: "myappname-http"
          containerPort: 80
          # protocol: http
          # ingress: true
        - name: "myappname-https"
          containerPort: 443
          # protocol: tls
          # ingress: true
        resources:
          requests:
            cpu: 100m
            memory: 200M
        env:
        # initContainer volume mount needs to be enabled in the template
        volumeMounts: []
---
# Source: argonaut-configs/templates/ingress.yaml
apiVersion: networking.istio.io/v1alpha3
kind: Gateway
metadata:
  name: "myappname-http-gw"
  labels:
    heritage: "Helm"
    release: "RELEASE-NAME"
    chart: "argonaut-configs"
    app: "myappname"
spec:
  selector:
    istio: ingressgateway # use Istio default gateway implementation
  servers:
    - port:
        name: "myappname-http"
        number: 80
        protocol: http
      hosts:
        - aws.tritonhq.io
---
# Source: argonaut-configs/templates/ingress.yaml
apiVersion: networking.istio.io/v1alpha3
kind: Gateway
metadata:
  name: "myappname-https-gw"
  labels:
    heritage: "Helm"
    release: "RELEASE-NAME"
    chart: "argonaut-configs"
    app: "myappname"
spec:
  selector:
    istio: ingressgateway # use Istio default gateway implementation
  servers:
    - port:
        name: "myappname-https"
        number: 443
        protocol: tls
      hosts:
        - aws.tritonhq.io
      tls:
        mode: SIMPLE
        credentialName: ingress-letsencrypt  # either this or cert and key
---
# Source: argonaut-configs/templates/ingress.yaml
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: "myappname-http-vs"
  labels:
    heritage: "Helm"
    release: "RELEASE-NAME"
    chart: "argonaut-configs"
    app: "myappname"
spec:
  hosts:
    - aws.tritonhq.io
  gateways:
    - "myappname-http-gw"
  exportTo:
    - "*" # TBD - env interaction
  http:
    - match:
        - uri:
            prefix: /wp/
      route:
        - destination:
            port:
              number: 80
            host: "myappname.dev.svc.cluster.local"
---
# Source: argonaut-configs/templates/ingress.yaml
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: "myappname-https-vs"
  labels:
    heritage: "Helm"
    release: "RELEASE-NAME"
    chart: "argonaut-configs"
    app: "myappname"
spec:
  hosts:
    - aws.tritonhq.io
  gateways:
    - "myappname-https-gw"
  exportTo:
    - "*" # TBD - env interaction
  http:
    - match:
        - uri:
            prefix: /wps/
      route:
        - destination:
            port:
              number: 80
            host: "myappname.dev.svc.cluster.local"
