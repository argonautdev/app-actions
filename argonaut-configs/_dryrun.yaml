---
# Source: argonaut-configs/templates/poddisruptionbudget.yaml
apiVersion: policy/v1beta1
kind: PodDisruptionBudget
metadata:
  name: "myappname-pdb"
spec:
  maxUnavailable: 25%
  selector:
    matchLabels:
      app: "myappname"
---
# Source: argonaut-configs/templates/service.yaml
kind: Service
apiVersion: v1
metadata:
  name: "myappname"
  labels:
    heritage: "Helm"
    release: "RELEASE-NAME"
    chart: "argonaut-configs"
    version: "v1"
    app: "myappname"
  # annotations:
  #   networking.istio.io/exportTo: "."
spec:
  selector:
    release: "RELEASE-NAME"
    chart: "argonaut-configs"
    app: "myappname"
  ports:
  - name: http
    protocol: TCP # UDP and SCTP are the other options
    port: 80
---
# Source: argonaut-configs/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: myappname
  labels:
    heritage: "Helm"
    release: "RELEASE-NAME"
    chart: "argonaut-configs"
    app: "myappname"
    version: "v1"
  annotations:
    {}
spec:
  serviceName: myappname
  selector:
    matchLabels:
      app: "myappname"
  replicas: 2
  podManagementPolicy: Parallel
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      name: "myappname"
      labels:
        heritage: "Helm"
        release: "RELEASE-NAME"
        chart: "argonaut-configs"
        app: "myappname"
      annotations:
        
    spec:
      securityContext:
        {}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 1
            podAffinityTerm:
              topologyKey: kubernetes.io/hostname
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - "myappname"
      terminationGracePeriodSeconds: 120
      # Mount Secrets
      volumes:
      # Persistence Enabled - volume mounts
      # extraConfig
      initContainers:

      containers:
      - name: "argonaut-configs"
        securityContext:
          {}
        image: "wordpress:latest"
        imagePullPolicy: "IfNotPresent"
        readinessProbe:
          failureThreshold: 5
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 10
          periodSeconds: 10
          successThreshold: 3
          timeoutSeconds: 5
        ports:
        #
        - name: http
          containerPort: 80
          # protocol: http
        #
        resources:
          limits:
            cpu: 200m
            memory: 256M
        env:
        # initContainer volume mount needs to be enabled in the template
        volumeMounts: []
---
# Source: argonaut-configs/templates/ingress.yaml
apiVersion: networking.istio.io/v1alpha3
kind: Gateway
metadata:
  name: "myappname"
  labels:
    heritage: "Helm"
    release: "RELEASE-NAME"
    chart: "argonaut-configs"
    app: "myappname"
  # annotations:
  #   service.beta.kubernetes.io/aws-load-balancer-ssl-cert: "arn:aws:acm:us-west-2:{act#}:certificate/xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"
  #   service.beta.kubernetes.io/aws-load-balancer-ssl-ports: "https"
  #   service.beta.kubernetes.io/aws-load-balancer-connection-idle-timeout: "300"
spec:
  selector:
    istio: ingressgateway # use Istio default gateway implementation
  servers:
    - port:
        name: http
        protocol: http
        number: 80
      hosts:
        - aws.tritonhq.io
    # - port:
    #     number: 443
    #     name: https
    #     protocol: HTTPS
    #   hosts:
    #     - "*"
    #   tls:
    #     mode: SIMPLE
    #     credentialName: helloworld-credential # either this or cert and key
    #     serverCertificate: /etc/certs/server.pem
    #     privateKey: /etc/certs/privatekey.pem
---
# Source: argonaut-configs/templates/externalservice.yaml
apiVersion: networking.istio.io/v1alpha3
kind: ServiceEntry
metadata:
  name: "rds-mysql-external"
  labels:
    heritage: "Helm"
    release: "RELEASE-NAME"
    chart: "argonaut-configs"
spec:
  hosts:
    - database-1.co45pjczxgry.us-east-2.rds.amazonaws.com
  ports:
    - name: mysql
      protocol: TCP
      number: 3306
  resolution: NONE # DNS
  location: MESH_EXTERNAL
---
# Source: argonaut-configs/templates/ingress.yaml
apiVersion: networking.istio.io/v1alpha3
kind: VirtualService
metadata:
  name: "myappname"
  labels:
    heritage: "Helm"
    release: "RELEASE-NAME"
    chart: "argonaut-configs"
    app: "myappname"
spec:
  hosts:
    - aws.tritonhq.io
  gateways:
    - "myappname"
  exportTo:
    - "*"
  http:
    - match:
        - uri:
            prefix: /
      route:
        - destination:
            port:
              number: 80
            host: myappname.dev.svc.cluster.local
            # host: "myappname.dev.svc.cluster.local"
