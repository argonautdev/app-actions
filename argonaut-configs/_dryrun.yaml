---
# Source: argonaut-configs/templates/poddisruptionbudget.yaml
apiVersion: policy/v1beta1
kind: PodDisruptionBudget
metadata:
  name: "myappname-pdb"
spec:
  maxUnavailable: 25%
  selector:
    matchLabels:
      app: "myappname"
---
# Source: argonaut-configs/templates/service.yaml
kind: Service
apiVersion: v1
metadata:
  name: myappname
  labels:
    heritage: "Helm"
    release: "RELEASE-NAME"
    chart: "argonaut-configs"
    app: "myappname"
  annotations:
    {}
spec:
  type: LoadBalancer
  selector:
    release: "RELEASE-NAME"
    chart: "argonaut-configs"
    app: "myappname"
  ports:
  - name: http
    protocol: TCP
    port: 80

# ---
# kind: Service
# apiVersion: v1
# metadata:
#   name: myappname-headless
#   labels:
#     heritage: "Helm"
#     release: "RELEASE-NAME"
#     chart: "argonaut-configs"
#     app: "myappname"
#
#   annotations:
#     service.alpha.kubernetes.io/tolerate-unready-endpoints: "true"
# spec:
#   clusterIP: None # This is needed for statefulset hostnames like elasticsearch-0 to resolve
#   # Create endpoints also if the related pod isn't ready
#   publishNotReadyAddresses: true
#   selector:
#     app: "myappname"
#   ports:
#   - name: http
#     port: 80
#   - name: transport
#     port:
---
# Source: argonaut-configs/templates/statefulset.yaml
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: myappname
  labels:
    heritage: "Helm"
    release: "RELEASE-NAME"
    chart: "argonaut-configs"
    app: "myappname"
  annotations:
    {}
spec:
  serviceName: myappname-headless
  selector:
    matchLabels:
      app: "myappname"
  replicas: 2
  podManagementPolicy: Parallel
  updateStrategy:
    type: RollingUpdate
  template:
    metadata:
      name: "myappname"
      labels:
        heritage: "Helm"
        release: "RELEASE-NAME"
        chart: "argonaut-configs"
        app: "myappname"
      annotations:
        
    spec:
      securityContext:
        {}
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 1
            podAffinityTerm:
              topologyKey: kubernetes.io/hostname
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - "myappname"
      terminationGracePeriodSeconds: 120
      # Mount Secrets
      volumes:
      # Persistence Enabled - volume mounts
      # extraConfig
      initContainers:

      containers:
      - name: "argonaut-configs"
        securityContext:
          {}
        image: "wordpress:latest"
        imagePullPolicy: "IfNotPresent"
        readinessProbe:
          failureThreshold: 5
          httpGet:
            path: /
            port: 80
          initialDelaySeconds: 10
          periodSeconds: 10
          successThreshold: 3
          timeoutSeconds: 5
        ports:
        - name: http
          containerPort: 80
        resources:
          limits:
            cpu: 200m
            memory: 256M
        env:
        # initContainer volume mount needs to be enabled in the template
        volumeMounts: []
